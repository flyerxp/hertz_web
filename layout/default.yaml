layouts:
  # 项目 main 文件，
  - path: main.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.
      
      package main
      
      import (
        "context"
        "github.com/cloudwego/hertz/pkg/app"
        "github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
        "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/cloudwego/hertz/pkg/app/server/registry"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        "github.com/cloudwego/hertz/pkg/common/utils"
        "github.com/cloudwego/hertz/pkg/protocol/consts"
        app2 "github.com/flyerxp/lib/v2/app"
        conf2 "github.com/flyerxp/lib/v2/config"
        "github.com/flyerxp/lib/v2/logger"
        "github.com/flyerxp/lib/v2/utils/netL"
        "github.com/flyerxp/webrpclib/v2/web"
        hertzzap "github.com/hertz-contrib/logger/zap"
        "github.com/hertz-contrib/requestid"
        "{{.GoModule}}/biz/dal"
        "go.uber.org/zap"
        "go.uber.org/zap/zapcore"
        "gopkg.in/natefinch/lumberjack.v2"
        "net"
        "os"
        "{{.GoModule}}/biz/mw"
        "time"
      )
      
      func main() {
        time.LoadLocation("Asia/Shanghai") 
        c := web.GetConf()
        name := conf2.GetConf().App.Name
        ip := netL.GetIp()[0].(*net.IPNet).IP.String() + ":" + c.Hertz.Port
        ctx := logger.GetContext(context.Background(), "WebServerStart")
        h := web.GetHttpServer(ctx, &registry.Info{
          ServiceName: name,
          Addr:        utils.NewNetAddr("tcp", ip),
          Weight:      1,
          Tags: map[string]string{"type": "web", "name": name},
        })
        h.Use(mw.ClientIp())
        registerMiddle(h)     
        dal.InitDal(ctx)
        h.Use(requestid.New())
          h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
          app2.Shutdown(ctx)
        })
        
        register(h)
        h.Spin()
      }
  
  
      func registerMiddle(r *server.Hertz) {
        registerLog(r)
        HzRecover(r)
      }
      func registerLog(r *server.Hertz) {
        level := zapcore.DebugLevel
        if conf2.GetConf().Env == "product" {
          level = zapcore.InfoLevel
        }
        l := hertzzap.NewLogger(
            hertzzap.WithCores([]hertzzap.CoreConfig{
            {
              Enc: zapcore.NewConsoleEncoder(logger.EncoderConfig()),
              Ws:  zapcore.AddSync(os.Stdout),
              Lvl: zap.NewAtomicLevelAt(level),
            },
            {
              Enc: zapcore.NewJSONEncoder(logger.EncoderConfig()),
              Ws:  getWriteSyncer("logs/hertz.log"),
              Lvl: zap.NewAtomicLevelAt(level),
            },
          }...),
        )
        r.OnShutdown = append(r.OnShutdown, func(ctx context.Context) {
          l.Sync()
          app2.Shutdown(ctx)
        })
        hlog.SetLogger(l)
      }
      func HzRecover(r *server.Hertz) {
        r.Use(recovery.Recovery(recovery.WithRecoveryHandler(func(c context.Context, ctx *app.RequestContext, err interface{}, stack []byte) {
          hlog.SystemLogger().CtxErrorf(c, "[Recovery] err=%v\nstack=%s", err, stack)
          hlog.SystemLogger().Infof("Client: %s", ctx.Request.Header.UserAgent())
          logger.AddError(c,zap.String("stack", string(stack)))
          logger.WriteLine(c)
          ctx.AbortWithStatus(consts.StatusInternalServerError)
        })))
      }
      func getWriteSyncer(file string) zapcore.WriteSyncer {
        lumberJackLogger := &lumberjack.Logger{
          Filename:   file,
          MaxSize:    1024 * 1024 * 1024,
          MaxBackups: 5,
          MaxAge:     48,
          Compress:   true,
          LocalTime:  true,
        }
        return zapcore.AddSync(lumberJackLogger)
      }


  # go.mod 文件，需要模板渲染数据{{.GoModule}}才能生成
  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}
      {{- if .UseApacheThrift}}
      replace github.com/apache/thrift => github.com/apache/thrift v0.13.0
      {{- end}}
  # .gitignore 文件
  - path: .gitignore
    delims:
      - ""
      - ""
    body: "*.o\n*.a\n*.so\n_obj\n_test\n*.[568vq]\n[568vq].out\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n_testmain.go\n*.exe\n*.exe~\n*.test\n*.prof\n*.rar\n*.zip\n*.gz\n*.psd\n*.bmd\n*.cfg\n*.pptx\n*.log\n*nohup.out\n*settings.pyc\n*.sublime-project\n*.sublime-workspace\n!.gitkeep\n.DS_Store\n/.idea\n/.vscode\n/output\n*.local.yml\ndumped_hertz_remote_config.json\n\t\t
    \ "
  # .hz 文件，包含 hz 版本，是 hz 创建的项目的标志，不需要传渲染数据
  - path: .hz
    delims:
      - '{{'
      - '}}'
    body: |-
      // Code generated by hz. DO NOT EDIT.

      hz version: {{.hzVersion}}

  # ping 自带 ping 的 handler
  - path: biz/handler/ping.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package handler

      import (
      	"context"

      	"github.com/cloudwego/hertz/pkg/app"
      	"github.com/cloudwego/hertz/pkg/common/utils"
      )

      // Ping .
      func Ping(ctx context.Context, c *app.RequestContext) {
      	c.JSON(200, utils.H{
      		"message": "pong",
      	})
      }     

  # 定义Dal
  - path: biz/dal/init.go
    delims:
      - ""
      - ""
    body: |-
      package dal
      
      import (
        "context"
      	"{{.GoModule}}/biz/dal/mysql"
      	"{{.GoModule}}/biz/dal/redis"
      )
      
      func InitDal(ctx context.Context) {
        mysql.InitMysql(ctx)
        redis.InitRedis(ctx)
      }

  # 定义DalMysql
  - path: biz/dal/mysql/init.go
    delims:
      - ""
      - ""
    body: |-
      package mysql
      
      import (
        "context"
        "github.com/flyerxp/lib/v2/middleware/mysqlL"
      )
      
      // 定义所有的数据库连接,每个连接一个名字
      var ConnExample *mysqlL.MysqlClient
        
      func InitMysql(ctx context.Context) {
        ConnExample, _ = mysqlL.GetEngine(ctx,"pubMysql")
      }

  # 定义Dal Redis
  - path: biz/dal/redis/init.go
    delims:
      - ""
      - ""
    body: |-
      package redis
  
      import (
        "context"
        "github.com/flyerxp/lib/v2/middleware/redisL"
      )
      
      var RedisExample *redisL.RedisC
      
      func InitRedis(ctx context.Context) {
        RedisExample, _ = redisL.GetEngine(ctx,"pubRedis")
      }
  # 定义路由注册的文件，需要模板渲染数据{{.RouterPkgPath}}才能生成
  - path: router_gen.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package main

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      	router "{{.RouterPkgPath}}"
      )

      // register registers all routers.
      func register(r *server.Hertz) {

      	router.GeneratedRegister(r)

      	customizedRegister(r)
      }

  # 自定义路由注册的文件
  - path: router.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package main

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      	handler "{{.HandlerPkgPath}}"
      )

      // customizeRegister registers customize routers.
      func customizedRegister(r *server.Hertz){
      	r.GET("/ping",  handler.Ping)

      	// your code ...
      }

  - path: readme.md
    delims:
      - ""
      - ""
    body: |-
      # *** Project

      ## introduce

      - Use the [Hertz](https://github.com/cloudwego/hertz/) framework
      - Integration of pprof, cors, recovery, access_log, gzip and other extensions of Hertz.
      - Generating the base code for unit tests.
      - Provides basic profile functions.
      - Provides the most basic MVC code hierarchy.

      ## Directory structure

      |  catalog   | introduce  |
      |  ----  | ----  |
      | conf  | Configuration files |
      | main.go  | Startup file |
      | hertz_gen  | Hertz generated model |
      | biz/handler  | Used for request processing, validation and return of response. |
      | biz/service  | The actual business logic. |
      | biz/dal  | Logic for operating the storage layer |
      | biz/route  | Routing and middleware registration |
      | biz/utils  | Wrapped some common methods |

      ## How to run

      ```shell
      sh build.sh
      sh output/bootstrap.sh
      ```
  - path: build.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      RUN_NAME={{.ServiceName}}
      mkdir -p output/bin output/conf
      cp script/bootstrap.sh output 2>/dev/null
      chmod +x output/bootstrap.sh
      cp -r conf/* output/conf
      go build -o output/bin/${RUN_NAME}

  - path: script/bootstrap.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      CURDIR=$(cd $(dirname $0); pwd)
      BinaryName={{.ServiceName}}
      echo "$CURDIR/bin/${BinaryName}"
      exec $CURDIR/bin/${BinaryName}

  # 默认路由注册文件，不要修改
  - path: biz/router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }