layouts:
  - path: handler.go
    body: |-
      {{$OutDirs := GetUniqueHandlerOutDir .Methods}}
      package {{.PackageName}}
      import (
       "context"
       "github.com/cloudwego/hertz/pkg/app"
      {{- range $k, $v := .Imports}}
       {{$k}} "{{$v.Package}}"
      {{- end}}     
      "{{$.ProjPackage}}/biz/utils"
      )
      {{range $_, $MethodInfo := .Methods}}
      {{$MethodInfo.Comment}}
      func {{$MethodInfo.Name}}(ctx context.Context, c *app.RequestContext) {
       var err error
       {{if ne $MethodInfo.RequestTypeName "" -}}
       var req {{$MethodInfo.RequestTypeName}}
       err = c.BindAndValidate(&req)
       if err != nil {
          //utils.RenderErrHtml(ctx, c,  err)
          utils.SendErrResponse(ctx, c,  err)
          return
       }
       {{end}}       
       //utils.RenderSuccessHtml(ctx, c, "", map[string]any{})
       utils.SendSuccessResponse(ctx, c, map[string]any{})
      }
      {{end}}
    update_behavior:
      type: "skip"

  #  - path: "biz/service/{{.GenPackage}}/{{.HandlerGenPath}}/{{ToSnakeCase .MethodName}}.go"
  #    loop_method: true
  #    update_behavior:
  #      type: "skip"
  #    body: |-
  #      package {{.FilePackage}}
  #      import (
  #       "context"

  #       "github.com/cloudwego/hertz/pkg/app"
  #      {{- range $k, $v := .Models}}
  #       {{$k}} "{{$v.Package}}"
  #      {{- end}}
  #      )
  #      type {{.Name}}Service struct {
  #          RequestContext  *app.RequestContext
  #          Context         context.Context
  #      }
  #
  #      func New{{.Name}}Service(Context context.Context, RequestContext *app.RequestContext) *{{.Name}}Service {
  #       return &{{.Name}}Service{RequestContext: RequestContext, Context: Context}
  #      }
  #
  #      func (h *{{.Name}}Service) Run(req *{{.RequestTypeName}}) ( resp *{{.ReturnTypeName}}, err error) {
  #        //defer func() {
  #        // hlog.CtxInfof(h.Context, "req = %+v", req)
  #        // hlog.CtxInfof(h.Context, "resp = %+v", resp)
  #        //}()
  #        // todo edit your code
  #       return
  #      }
  - path: router.go
    delims:
      - '{{'
      - '}}'
    update_behavior:
      type: "skip"
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.
      
      package {{$.PackageName}}
      
      import (
        "github.com/cloudwego/hertz/pkg/app/server"
        {{- range $k, $v := .HandlerPackages}}
        {{$k}} "{{$v}}"
        {{- end}}
      )
      
      /*
      This file will register all the routes of the services in the master idl.
      And it will update automatically when you use the "update" command for the idl.
      So don't modify the contents of the file, or your code will be deleted when it is updated.
      */
      
      {{define "g"}}
      {{- if eq .Path "/"}}r
      {{- else}}{{.GroupName}}{{end}}
      {{- end}}
      
      {{define "G"}}
      {{- if ne .Handler ""}}
        {{- .GroupName}}.{{.HttpMethod}}("{{.Path}}", append({{.HandlerMiddleware}}Mw(),{{.Handler}},)...)
      {{- end}}
      
      {{- if ne (len .Children) 0}}
      {{.MiddleWare}} := {{template "g" .}}.Group("{{.Path}}", {{.GroupMiddleware}}Mw()...) 
      {{- end}}
      {{- range $_, $router := .Children}}
      {{- if ne .Handler ""}}
        {{template "G" $router}}
      {{- else}}
        {	{{template "G" $router}}
      }
      {{- end}}
      {{- end}}      
      {{- end}}
     
      // Register register routes based on the IDL 'api.${HTTP Method}' annotation.
      func Register(r *server.Hertz) {
        {{template "G" .Router}}
      }

  - path: middleware.go
    delims:
      - '{{'
      - '}}'
    update_behavior:
      type: "skip"
    body: |-
      // Code generated by hertz generator.

      package {{$.PackageName}}

      import (
      	"github.com/cloudwego/hertz/pkg/app"
      )    
      {{define "M"}}
      {{- if ne .Children.Len 0}}
      func {{.GroupMiddleware}}Mw() []app.HandlerFunc {
      	// your code...
      	return nil
      }
      {{end}}
      {{- if ne .Handler ""}}
      func {{.HandlerMiddleware}}Mw() []app.HandlerFunc {
      	// your code...
      	return nil
      }
      {{end}}
      {{range $_, $router := $.Children}}{{template "M" $router}}{{end}}
      {{- end}}

      {{template "M" .Router}}
  # ip获取修改
  - path: biz/mw/client.go
    delims:
      - ""
      - ""
    update_behavior:
      type: "skip"
    body: |-
      // 获取客户端的逻辑
      package mw
      
      import (
        "context"
        "github.com/cloudwego/hertz/pkg/app"
        "net"
      )
      
      func ClientIp() app.HandlerFunc {
           return func(ctx context.Context, c *app.RequestContext) {
            trustedIp := []*net.IPNet{
              { // 0.0.0.0/0 (IPv4)
                IP:   net.IP{0x0, 0x0, 0x0, 0x0},
                Mask: net.IPMask{0x0, 0x0, 0x0, 0x0},
              },
              { // ::/0 (IPv6)
                IP:   net.IP{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                Mask: net.IPMask{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
              },
              { // ::/0 (IPv6)
                IP: net.ParseIP("127.0.0.1"),
              },
            }
            c.SetClientIPFunc(app.ClientIPWithOption(app.ClientIPOptions{
              RemoteIPHeaders: []string{"X-Real-IP", "X-Forwarded-For"},
              TrustedCIDRs:    trustedIp,
            }))
            c.Next(ctx)
          }
      }
  - path: biz/utils/page.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package utils

      import (
        "bytes"
        "fmt"
        "github.com/flyerxp/lib/v2/utils/json"
        "github.com/osteele/liquid"
        "github.com/osteele/liquid/render"
        "net/url"
        "strconv"
      )

      type Page struct {
        Page    int    `json:"page"`
        Size    int    `json:"size"`
        HasMore bool   `json:"has_more"`
        Url     string `json:"url"`
      }

      func getPageHtml(path string, query url.Values, page Page) string {
        query.Del("page")
        var bt bytes.Buffer
        bt.WriteString(`<nav aria-label="...">
        <ul class="pagination pagination-sm">`)
        if page.Page > 1 {
          //prePage = fmt.Sprintf() (page-1)
          query.Set("page", strconv.Itoa(page.Page-1))
          bt.WriteString(fmt.Sprintf(`<li class="page-item disabled"><a class="page-link" href="%s?%s" tabindex="-1" aria-disabled="true">Previous</a>
          </li>`, path, query.Encode()))
          i := page.Page - 5
          if i < 1 {
          i = 1
        }
        for ; i < page.Page; i++ {
          query.Set("page", strconv.Itoa(i))
          bt.WriteString(fmt.Sprintf(`<li class="page-item"><a class="page-link" href="%s?%s">%d</a>
          </li>`, path, query.Encode(), i))
        }
      }
      query.Set("page", strconv.Itoa(page.Page))
        //bt.WriteString(fmt.Sprintf(`<li class="page-item active" aria-current="page"><a class="page-link" href="%s?%s">%d <span class="visually-hidden">(current)</span></a>
        //</li>`, path, query.Encode(), page.Page))
        bt.WriteString(fmt.Sprintf(`<li class="page-item active" aria-current="page"><a class="page-link" href="#">%d <span class="visually-hidden">(current)</span></a>
        </li>`, page.Page))
        if page.HasMore {
          query.Set("page", strconv.Itoa(page.Page+1))
          bt.WriteString(fmt.Sprintf(`<li class="page-item"><a class="page-link" href="%s?%s">下一页</a>
          </li>`, path, query.Encode()))
        }
        bt.WriteString(`</ul>
        </nav>`)
        return bt.String()
      }

      func registerBlock(engine *liquid.Engine) {
        engine.RegisterBlock("page", func(c render.Context) (string, error) {
        page := Page{}
        str, err := c.InnerString()
        if err != nil {
          return "", err
        }
        //e := json.Unmarshal([]byte(`{"page":1,"size":"10","hasMore":"true","url":"/asdfa/asdfadsf/8asdfads?asd=3&adsf,=4"'}`), &a)
        err = json.Decode([]byte(str), &page)
        if err != nil {
          return "", err
        }
        urlObj, _ := url.Parse(page.Url)
          query := urlObj.Query()
          query.Del("page")
          html := getPageHtml(urlObj.Path, query, page)
          return html, nil
        })
      }
  - path: biz/utils/resp.go
    delims:
      - ""
      - ""
    update_behavior:
      type: "skip"
    body: |-
      package utils
       import (
         "context"
         "errors"
         "github.com/cloudwego/hertz/pkg/app"
         "github.com/cloudwego/hertz/pkg/app/server/render"
         "github.com/cloudwego/hertz/pkg/protocol/consts"
         "github.com/cloudwego/kitex/pkg/kerrors"
         "github.com/flyerxp/lib/v2/config"
         "github.com/flyerxp/lib/v2/logger"
         "github.com/flyerxp/lib/v2/utils/json"
         "github.com/flyerxp/webrpclib/v2/web"
         "github.com/osteele/liquid"
         "go.uber.org/zap"
         "os"
         "path/filepath"
       )
       var globalVar TemplateGlobal
       type TemplateGlobal struct {
         User         map[string]string
         ImgDomain    string
         JsDomain     string
         CssDomain    string
         NodeJsDomain string
         Other        map[string]string
       }
       var TmplEngine *liquid.Engine
       func init() {
         initGlobal()
         initTmplCache()
         render.ResetJSONMarshal(func(v interface{}) ([]byte, error) {
           b, e := json.Encode(v)
           return b, e
         })
       }
       func initGlobal() {
         globalVar = TemplateGlobal{
           ImgDomain: web.GetConf().Resource.RootPathImg,
           JsDomain: web.GetConf().Resource.RootPathJs,
           CssDomain: web.GetConf().Resource.RootPathCss,
           NodeJsDomain: web.GetConf().Resource.RootPathNodeJs,
           Other: make(map[string]string),
           User: make(map[string]string),
         }
         if web.GetConf().Resource.Other != nil {
             for i, v := range web.GetConf().Resource.Other {
               globalVar.Other[i] = v
             }
         }
       }
       func initTmplCache() {
         if TmplEngine == nil {
           TmplEngine = liquid.NewEngine()
           TmplEngine.Delims("{[{", "}]}", "{%", "%}")
           registerBlock(TmplEngine)
           f, _ := filepath.Glob("render/html/include/*.html")
           for _, v := range f {
             b, _ := os.ReadFile(v)
             _, _ = TmplEngine.ParseTemplateAndCache(b, filepath.Base(v), 1)
           }
         }
       }
       const ErrorCodeBiz = 206          //业务错误
       const RpcError = 203              //rpc错误
       const RpcBizError = 202           //rpc 业务错误
       const ErrorTypeBizWaning = "warn"
       const ErrorTypeBizErr = "err"
       const ErrorTypeBizNormal = "normal"
       type Response struct {
         Status  int   `json:"status"`
         Message error `json:"message"`
         Data    any   `json:"data"`
       }
       type Error struct {
         ErrorType string            `json:"ErrorType"`
         Msg       string            `json:"Msg"`
         FailField string            `json:"FailField"`
         Meta      map[string]string `json:"Meta"`
       }        
       func (e Error) Error() string {
         //b, _ := json.Encode(e)
         return e.Msg
       }
      
       func GetError(errType string, msg string, meta map[string]string) Error {
         r := Error{
           ErrorType: errType,
           Msg: msg,
         }
         if v, ok := meta["FailField"]; ok {
           r.ErrorType = v
           delete(meta, "FailField")
         }
         return r
       }
      
       // SendErrResponse  pack error response
       func SendErrResponse(ctx context.Context, c *app.RequestContext, err error) {
         if bizE, ok := kerrors.FromBizStatusError(err); ok {
           if config.GetConf().Env == "product" {
             if _, ok = bizE.(kerrors.GRPCStatusIface); ok {
               logger.AddError(ctx, zap.String("rpcError", err.Error()), zap.Error(err))
               err = GetError(ErrorTypeBizErr, "Rpc错误", bizE.BizExtra())
             } else if bizE.BizStatusCode() == RpcError {
               logger.AddError(ctx, zap.String("systemErr", err.Error()), zap.Error(err))
               err = GetError(ErrorTypeBizErr, "系统错误", bizE.BizExtra())
             } else {
               err = GetError(ErrorTypeBizNormal, bizE.BizMessage(), bizE.BizExtra())
             }
           } else {
             err = GetError(ErrorTypeBizNormal, bizE.BizMessage(), bizE.BizExtra())
           }
         } else {
           err = GetError(ErrorTypeBizErr, err.Error(), map[string]string{})
         }
         response := Response{
           Status:ErrorCodeBiz,
           Message:err, 
           Data: map[string]string{},
         }
         c.JSON(consts.StatusOK, response)
       }
      
       // SendSuccessResponse  pack success response
       func SendSuccessResponse(ctx context.Context, c *app.RequestContext, data interface{}) {
           // todo edit custom code
         response := Response{
           Status:0, 
           Message: nil, 
           Data: data,
         }
         c.SetContentType("application/json;charset:utf-8")
         c.JSON(200, response)
       }
      
       func RenderErrHtml(ctx context.Context, c *app.RequestContext, err error) {
           var b []byte
           if config.GetConf().Env == "product" {
             if bizE, ok := kerrors.FromBizStatusError(err); ok {
               if _, ok = bizE.(kerrors.GRPCStatusIface); ok {
                 logger.AddError(ctx, zap.String("rpcError", err.Error()), zap.Error(err))
                 err = errors.New("Rpc错误")
               } else if bizE.BizStatusCode() == 203 {
                 logger.AddError(ctx, zap.String("systemErr", err.Error()), zap.Error(err))
                 err = errors.New("系统错误")
               }
             }
           }
           data := map[string]any{
              "error": err,
           }
           if string(c.GetHeader("x-requested-with")) == "XMLHttpRequest" {
             data["error"] = err
             b, _ = os.ReadFile("render/html/public/errorpop.html")
           } else {
             data = getGlobalData(ctx, c, data)
             initTmplCache()
             b, _ = os.ReadFile("render/html/public/error.html")
           }
           b, err = TmplEngine.ParseAndRender(b, data)
           c.Data(505, "text/html; charset=utf-8", b)
       }
       func Render404Html(ctx context.Context, c *app.RequestContext, data map[string]any) {
         data = getGlobalData(ctx, c, data)
         initTmplCache()
         b, _ := os.ReadFile("render/html/public/error404.html")
         b, _ = TmplEngine.ParseAndRender(b, data)
         c.Data(404, "text/html; charset=utf-8", b)
       }
       func RenderSuccessHtml(ctx context.Context, c *app.RequestContext, name string, data map[string]any) {
           data = getGlobalData(ctx, c, data)
           initTmplCache()
           b, err := os.ReadFile(name)
           if err != nil {
             panic(err)
           }
           b, err = TmplEngine.ParseAndRender(b, data)
           if err != nil {
             panic(err)
           }
         c.Data(200, "text/html; charset=utf-8", b)
       }
       func getGlobalData(ctx context.Context, c *app.RequestContext, data map[string]any) map[string]any {
         for i := range globalVar.Other {
            data["Global"+i] = globalVar.Other[i]
         }
         return data
       }
  # 配置文件
  - path: conf/test/app.yml
    delims:
      - ""
      - ""
    update_behavior:
      type: "skip"
    body: |-
      env: test
      app:
        name: Admin
        type: web
        logger:
          level: debug
          encoding: json
          outputPaths:
            - stdout
            - logs/Admin
          errorOutputPaths:
            - stderr
          initialFields:
            app: Admin
          encoderConfig:
            #messageKey: msg
            levelKey: level
            nameKey: name
            TimeKey: time
            #CallerKey: caller
            #FunctionKey: func
            StacktraceKey: stacktrace
            LineEnding: "\n"
        errlog:
          level: warn
          encoding: json
          outputPaths:
            - stdout
            - logs/Admin
          errorOutputPaths:
            - stderr
          initialFields:
            app: Admin
          encoderConfig:
            #messageKey: msg
            levelKey: level
            nameKey: name
            TimeKey: time
            CallerKey: caller
            FunctionKey: func
            StacktraceKey: stacktrace
            LineEnding: "\n"
      redis:
      -
        name: pubRedis
        address: [ "nacosconfredis:6379" ]
        user:
        pwd:
        master:
      mysql:
      -
        name: pubMysql
        address: pubmysql
        port: 3306
        user: test
        pwd: 123456
        ssl: disable
        db: nacos
        sql_log: yes
        read_timeout: 100
        conn_timeout: 100
        write_timeout: 100
        char_set: utf8mb4
        max_idle_conns: 10
        max_open_conns: 500
      nacos:
        -
          name: nacosConf
          url: http://nacosconf:8848/nacos
          contextPath: /nacos
          ns: 62c3bcf9-7948-4c26-a353-cebc0a7c9712
          user: dev
          pwd: 123456
          master:
          redis:
            name: base
            address: [ "nacosconfredis:6379" ]
            user:
            pwd:
            master:
      elastic:
      -
        name: pubEs
        host: [ "pubEs:9200" ]
        user: elastic
        pwd: SLmOE+pJcwsxbFrf-rzh
        read_timeout: 600ms
        conn_timeout: 80ms
        default_max_window_result: 0
        default_track_total_hits: 0
        auto_detect: false
        max_window_result:
          test: 1000
        track_total_hits:
          test: 2000
      #elasticNacos:
      #  name: nacosConf
      #  did: elastic
      #  group: elastic
      #  ns: 62c3bcf9-7948-4c26-a353-cebc0a7c9712
      pulsar:
      -
        name: pubPulsar
        address: [ "pubpulsar:6650" ]
      pulsarNacos:
        name: nacosConf
        did: pulsar
        group: pulsar
        ns: 62c3bcf9-7948-4c26-a353-cebc0a7c9712
  - path: conf/test/hertz.yml
    delims:
      - ""
      - ""
    update_behavior:
      type: "skip"
    body: |-
      hertz:
        address: ""
        port: 1081
        idle_timeout: 60s
        read_timeout: 10s
        max_request_body_size:
        write_timeout: 30s
        enable_pprof: false
        enable_gzip: true
        enable_access_log: true
        h2C: false
        service_find:
          type: nacos
          service_conf_name:
  - path: conf/test/pulsar.yml
    delims:
      - ""
      - ""
    update_behavior:
      type: "skip"
    body: |-
      topic_distribution:
        10: pubPulsar
      topic:
        -
          code: 10101001
          delay: 0
        -
          code_str: test
          delay: 0
          cluster: pubPulsar
  - path: conf/test/pulsar.yml
    delims:
      - ""
      - ""
    update_behavior:
      type: "skip"
    body: |-
      topicinit:  
        - 10101001