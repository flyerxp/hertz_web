layouts:
  - path: handler.go
    body: |-
      {{$OutDirs := GetUniqueHandlerOutDir .Methods}}
      package {{.PackageName}}
      import (
       "context"
       "github.com/cloudwego/hertz/pkg/app"
      {{- range $k, $v := .Imports}}
       {{$k}} "{{$v.Package}}"
      {{- end}}     
      "{{$.ProjPackage}}/biz/utils"
      )
      {{range $_, $MethodInfo := .Methods}}
      {{$MethodInfo.Comment}}
      func {{$MethodInfo.Name}}(ctx context.Context, c *app.RequestContext) {
       var err error
       {{if ne $MethodInfo.RequestTypeName "" -}}
       var req {{$MethodInfo.RequestTypeName}}
       err = c.BindAndValidate(&req)
       if err != nil {
          //utils.RenderErrHtml(ctx, c,  err)
          utils.SendErrResponse(ctx, c, err)
          return
       }
       {{end}}       
       //utils.RenderSuccessHtml(ctx, c, "", map[string]any{})
       utils.SendSuccessResponse(ctx, c, map[string]any{})
      }
      {{end}}
    update_behavior:
      type: "skip"

#  - path: "biz/service/{{.GenPackage}}/{{.HandlerGenPath}}/{{ToSnakeCase .MethodName}}.go"
#    loop_method: true
#    update_behavior:
#      type: "skip"
#    body: |-
#      package {{.FilePackage}}
#      import (
#       "context"

#       "github.com/cloudwego/hertz/pkg/app"
#      {{- range $k, $v := .Models}}
#       {{$k}} "{{$v.Package}}"
#      {{- end}}
#      )
#      type {{.Name}}Service struct {
#          RequestContext  *app.RequestContext
#          Context         context.Context
#      }
#
#      func New{{.Name}}Service(Context context.Context, RequestContext *app.RequestContext) *{{.Name}}Service {
#       return &{{.Name}}Service{RequestContext: RequestContext, Context: Context}
#      }
#
#      func (h *{{.Name}}Service) Run(req *{{.RequestTypeName}}) ( resp *{{.ReturnTypeName}}, err error) {
#        //defer func() {
#        // hlog.CtxInfof(h.Context, "req = %+v", req)
#        // hlog.CtxInfof(h.Context, "resp = %+v", resp)
#        //}()
#        // todo edit your code
#       return
#      }

  - path: router.go
    delims:
      - '{{'
      - '}}'
    update_behavior:
      type: "skip"
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.
      
      package {{$.PackageName}}
      
      import (
        "github.com/cloudwego/hertz/pkg/app/server"
        {{- range $k, $v := .HandlerPackages}}
        {{$k}} "{{$v}}"
        {{- end}}
      )
      
      /*
      This file will register all the routes of the services in the master idl.
      And it will update automatically when you use the "update" command for the idl.
      So don't modify the contents of the file, or your code will be deleted when it is updated.
      */
      
      {{define "g"}}
      {{- if eq .Path "/"}}r
      {{- else}}{{.GroupName}}{{end}}
      {{- end}}
      
      {{define "G"}}
      {{- if ne .Handler ""}}
        {{- .GroupName}}.{{.HttpMethod}}("{{.Path}}", append({{.HandlerMiddleware}}Mw(),{{.Handler}},)...)
      {{- end}}
      
      {{- if ne (len .Children) 0}}
      {{.MiddleWare}} := {{template "g" .}}.Group("{{.Path}}", {{.GroupMiddleware}}Mw()...) 
      {{- end}}
      {{- range $_, $router := .Children}}
      {{- if ne .Handler ""}}
        {{template "G" $router}}
      {{- else}}
        {	{{template "G" $router}}
      }
      {{- end}}
      {{- end}}      
      {{- end}}
     
      // Register register routes based on the IDL 'api.${HTTP Method}' annotation.
      func Register(r *server.Hertz) {
        {{template "G" .Router}}
      }

  - path: middleware.go
    delims:
      - '{{'
      - '}}'
    body: |-
      // Code generated by hertz generator.

      package {{$.PackageName}}

      import (
      	"github.com/cloudwego/hertz/pkg/app"
      )    
      {{define "M"}}
      {{- if ne .Children.Len 0}}
      func {{.GroupMiddleware}}Mw() []app.HandlerFunc {
      	// your code...
      	return nil
      }
      {{end}}
      {{- if ne .Handler ""}}
      func {{.HandlerMiddleware}}Mw() []app.HandlerFunc {
      	// your code...
      	return nil
      }
      {{end}}
      {{range $_, $router := $.Children}}{{template "M" $router}}{{end}}
      {{- end}}

      {{template "M" .Router}}